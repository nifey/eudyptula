From 69eb45fbbda9cdc79acdd1ebc33bfa7b8c541929 Mon Sep 17 00:00:00 2001
From: Abdun Nihaal <abdun.nihaal@gmail.com>
Date: Wed, 15 Dec 2021 19:37:33 +0530
Subject: [PATCH] Add id to task_struct

Create a new id field for the task struct that is initialized to 1234567.
The id of a process can be read from /proc/<pid>/id.
The id gets incremented on every read.

Signed-off-by: Abdun Nihaal <abdun.nihaal@gmail.com>
---
 fs/proc/base.c        | 12 ++++++++++++
 include/linux/sched.h |  4 ++++
 init/init_task.c      |  2 ++
 kernel/fork.c         |  1 +
 4 files changed, 19 insertions(+)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index 533d5836eb9a..a802314a563a 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -3141,6 +3141,16 @@ static int proc_pid_personality(struct seq_file *m, struct pid_namespace *ns,
 	return err;
 }
 
+static int proc_pid_id(struct seq_file *m, struct pid_namespace *ns,
+		       struct pid *pid, struct task_struct *task)
+{
+	mutex_lock(&task->id_update_mutex);
+	seq_printf(m, "%d\n", task->id);
+	task->id++;
+	mutex_unlock(&task->id_update_mutex);
+	return 0;
+}
+
 #ifdef CONFIG_LIVEPATCH
 static int proc_pid_patch_state(struct seq_file *m, struct pid_namespace *ns,
 				struct pid *pid, struct task_struct *task)
@@ -3185,6 +3195,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	ONE("status",     S_IRUGO, proc_pid_status),
 	ONE("personality", S_IRUSR, proc_pid_personality),
 	ONE("limits",	  S_IRUGO, proc_pid_limits),
+	ONE("id",         S_IRUGO, proc_pid_id),
 #ifdef CONFIG_SCHED_DEBUG
 	REG("sched",      S_IRUGO|S_IWUSR, proc_pid_sched_operations),
 #endif
@@ -3530,6 +3541,7 @@ static const struct pid_entry tid_base_stuff[] = {
 	ONE("status",    S_IRUGO, proc_pid_status),
 	ONE("personality", S_IRUSR, proc_pid_personality),
 	ONE("limits",	 S_IRUGO, proc_pid_limits),
+	ONE("id",        S_IRUGO, proc_pid_id),
 #ifdef CONFIG_SCHED_DEBUG
 	REG("sched",     S_IRUGO|S_IWUSR, proc_pid_sched_operations),
 #endif
diff --git a/include/linux/sched.h b/include/linux/sched.h
index c1a927ddec64..b3836275edd3 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1488,6 +1488,10 @@ struct task_struct {
 	struct callback_head		l1d_flush_kill;
 #endif
 
+	// Mutex to protect writes to id
+	struct mutex			id_update_mutex;
+	unsigned int			id;
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/init/init_task.c b/init/init_task.c
index 2d024066e27b..32b6081e1663 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -214,6 +214,8 @@ struct task_struct init_task
 #ifdef CONFIG_SECCOMP_FILTER
 	.seccomp	= { .filter_count = ATOMIC_INIT(0) },
 #endif
+	.id_update_mutex = __MUTEX_INITIALIZER(init_task.id_update_mutex),
+	.id		= 1234567,
 };
 EXPORT_SYMBOL(init_task);
 
diff --git a/kernel/fork.c b/kernel/fork.c
index 38681ad44c76..0d6e9a2cf807 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -2046,6 +2046,7 @@ static __latent_entropy struct task_struct *copy_process(
 	 * Clear TID on mm_release()?
 	 */
 	p->clear_child_tid = (clone_flags & CLONE_CHILD_CLEARTID) ? args->child_tid : NULL;
+	p->id = 1234567;
 
 	ftrace_graph_init_task(p);
 
-- 
2.34.1

