From c063061eb62f3b86841a46f3468fd7cb6761348e Mon Sep 17 00:00:00 2001
From: Abdun Nihaal <abdun.nihaal@gmail.com>
Date: Wed, 8 Dec 2021 21:37:44 +0530
Subject: [PATCH] Add kmem_cache for Task 13

Create and use kmem_cache for struct identity to speed up
allocations and frees.

Signed-off-by: Abdun Nihaal <abdun.nihaal@gmail.com>
---
 task12/list.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/task12/list.c b/task12/list.c
index a3bc1f9..f4d47b7 100644
--- a/task12/list.c
+++ b/task12/list.c
@@ -13,13 +13,14 @@ struct identity {
 	bool  busy;
 };
 
+static struct kmem_cache *identity_cache;
 LIST_HEAD(identity_list);
 
 int identity_create(char *name, int id)
 {
 	struct identity *new;
 
-	new = kmalloc(sizeof(struct identity), GFP_KERNEL);
+	new = kmem_cache_alloc(identity_cache, GFP_KERNEL);
 	if (!new)
 		return -ENOMEM;
 	strcpy(new->name, name);
@@ -47,7 +48,7 @@ void identity_destroy(int id)
 	list_for_each_entry(iter, &identity_list, node) {
 		if (iter->id == id) {
 			list_del(&iter->node);
-			kfree(iter);
+			kmem_cache_free(identity_cache, iter);
 			return;
 		}
 	}
@@ -66,6 +67,12 @@ static int __init list_init(void)
 {
 	struct identity *temp;
 
+	identity_cache = KMEM_CACHE(identity, (SLAB_RECLAIM_ACCOUNT|SLAB_ACCOUNT));
+	if (!identity_cache) {
+		pr_err("Cannot create identity cache\n");
+		return -ENOMEM;
+	}
+
 	pr_debug("Vanakkam\n");
 	identity_create("Aswin", 1);
 	identity_create("Allwin", 2);
@@ -93,6 +100,7 @@ static int __init list_init(void)
 
 static void __exit list_exit(void)
 {
+	kmem_cache_destroy(identity_cache);
 	pr_debug("Ta Ta\n");
 }
 
-- 
2.34.1

